{"version":3,"file":"Platform.js","sourceRoot":"","sources":["../src/Platform.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAGhC,OAAO,EACL,cAAc,EACd,oBAAoB,EACpB,cAAc,EACd,gBAAgB,GACjB,MAAM,uBAAuB,CAAC;AAM/B,SAAS,MAAM,CAAI,SAAqD;IACtE,IAAI,SAAS,CAAC,cAAc,CAAC,EAAE,CAAC,EAAE;QAChC,OAAO,SAAS,CAAC,EAAE,CAAE,CAAC;KACvB;SAAM,IAAI,EAAE,KAAK,KAAK,IAAI,SAAS,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;QAC7D,OAAO,SAAS,CAAC,MAAO,CAAC;KAC1B;SAAM,IAAI,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;QAC9C,OAAO,SAAS,CAAC,OAAQ,CAAC;KAC3B;IACD,gBAAgB;IAChB,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,QAAQ,GAAG;IACf;;;OAGG;IACH,EAAE;IACF;;;;;;;OAOG;IACH,MAAM,EAAE,MAAwB;IAChC;;;OAGG;IACH,cAAc;IACd;;;;OAIG;IACH,oBAAoB;IACpB;;;;OAIG;IACH,cAAc;IACd;;;OAGG;IACH,gBAAgB;CACjB,CAAC;AAEF,eAAe,QAAQ,CAAC","sourcesContent":["import OS from 'expo-router/os';\nimport { PlatformOSType } from 'react-native';\n\nimport {\n  isDOMAvailable,\n  canUseEventListeners,\n  canUseViewport,\n  isAsyncDebugging,\n} from './environment/browser';\n\nexport type PlatformSelectOSType = PlatformOSType | 'native' | 'electron' | 'default';\n\nexport type PlatformSelect = <T>(specifics: { [platform in PlatformSelectOSType]?: T }) => T;\n\nfunction select<T>(specifics: { [platform in PlatformSelectOSType]?: T }): T | undefined {\n  if (specifics.hasOwnProperty(OS)) {\n    return specifics[OS]!;\n  } else if (OS !== 'web' && specifics.hasOwnProperty('native')) {\n    return specifics.native!;\n  } else if (specifics.hasOwnProperty('default')) {\n    return specifics.default!;\n  }\n  // do nothing...\n  return undefined;\n}\n\nconst Platform = {\n  /**\n   * Denotes the currently running platform.\n   * Can be one of ios, android, web.\n   */\n  OS,\n  /**\n   * Returns the value with the matching platform.\n   * Object keys can be any of ios, android, native, web, default.\n   *\n   * @ios ios, native, default\n   * @android android, native, default\n   * @web web, default\n   */\n  select: select as PlatformSelect,\n  /**\n   * Denotes if the DOM API is available in the current environment.\n   * The DOM is not available in native React runtimes and Node.js.\n   */\n  isDOMAvailable,\n  /**\n   * Denotes if the current environment can attach event listeners\n   * to the window. This will return false in native React\n   * runtimes and Node.js.\n   */\n  canUseEventListeners,\n  /**\n   * Denotes if the current environment can inspect properties of the\n   * screen on which the current window is being rendered. This will\n   * return false in native React runtimes and Node.js.\n   */\n  canUseViewport,\n  /**\n   * If the JavaScript is being executed in a remote JavaScript environment.\n   * When `true`, synchronous native invocations cannot be executed.\n   */\n  isAsyncDebugging,\n};\n\nexport default Platform;\n"]}