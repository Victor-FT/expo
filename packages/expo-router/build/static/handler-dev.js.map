{"version":3,"file":"handler-dev.js","sourceRoot":"","sources":["../../src/static/handler-dev.ts"],"names":[],"mappings":"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","sourcesContent":["import { Readable, Writable } from 'node:stream';\n// import { createServer as createViteServer } from 'vite';\n// import viteReact from '@vitejs/plugin-react';\n\n// import type { Config } from '../../config.js';\n// import { resolveConfig } from '../config.js';\nimport React from 'react';\n\nimport { renderHtml } from './html-renderer';\nimport { decodeInput, hasStatusCode } from './utils';\nimport { Slot } from '../rsc/client';\nimport { joinPath, fileURLToFilePath, decodeFilePathFromAbsolute } from '../rsc/path.js';\nimport { endStream } from '../rsc/stream';\n\n// import {\n//   initializeWorker,\n//   registerReloadCallback,\n//   registerImportCallback,\n//   registerModuleCallback,\n//   renderRscWithWorker,\n//   getSsrConfigWithWorker,\n// } from './dev-worker-api.js';\n// import { patchReactRefresh } from '../plugins/patch-react-refresh.js';\n// import { rscIndexPlugin } from '../plugins/vite-plugin-rsc-index.js';\n// import {\n//   rscHmrPlugin,\n//   hotImport,\n//   moduleImport,\n// } from '../plugins/vite-plugin-rsc-hmr.js';\n// import { rscEnvPlugin } from '../plugins/vite-plugin-rsc-env.js';\n// import type { BaseReq, BaseRes, Handler } from './types.js';\n// import { mergeUserViteConfig } from '../utils/merge-vite-config.js';\n\nexport const CLIENT_MODULE_MAP = {\n  react: require('react'),\n  'rd-server': require('react-dom/server.edge'),\n  'rsdw-client': require('react-server-dom-webpack/client.edge'),\n  'waku-client': require('expo-router/build/rsc/client.js'),\n};\nexport type CLIENT_MODULE_KEY = keyof typeof CLIENT_MODULE_MAP;\n\ntype Config = {\n  basePath: string;\n  rscPath: string;\n  htmlHead: string;\n  srcDir: string;\n  mainJs: string;\n  publicDir: string;\n};\n\nexport function createHandler<Context, Req extends Request, Res extends Response>(options: {\n  projectRoot: string;\n  config: Config;\n  ssr?: boolean;\n  env?: Record<string, string>;\n  //   unstable_prehook?: (req: Req, res: Res) => Context;\n  //   unstable_posthook?: (req: Req, res: Res, ctx: Context) => void;\n  ssrLoadModule: (fileURL: string) => Promise<unknown>;\n  transformIndexHtml: (pathname: string, data: string) => Promise<string>;\n  renderRscWithWorker: <Context>(props: {\n    input: string;\n    searchParamsString: string;\n    method: 'GET' | 'POST';\n    contentType: string | undefined;\n    config: Config;\n    context: unknown;\n    stream?: ReadableStream | undefined;\n    moduleIdCallback?: (id: string) => void;\n  }) => Promise<readonly [ReadableStream, Context]>;\n}) {\n  const {\n    ssr,\n    // unstable_prehook, unstable_posthook\n  } = options;\n  //   if (!unstable_prehook && unstable_posthook) {\n  //     throw new Error('prehook is required if posthook is provided');\n  //   }\n  (globalThis as any).__WAKU_PRIVATE_ENV__ = options.env || {};\n\n  const loadServerFile = async (fileURL: string) => {\n    return options.ssrLoadModule(fileURLToFilePath(fileURL));\n  };\n\n  const transformIndexHtml = async (pathname: string) => {\n    // const vite = await vitePromise;\n    const encoder = new TextEncoder();\n    const decoder = new TextDecoder();\n    let headSent = false;\n    return new TransformStream({\n      transform(chunk, controller) {\n        if (!(chunk instanceof Uint8Array)) {\n          throw new Error('Unknown chunk type');\n        }\n        if (!headSent) {\n          headSent = true;\n          let data = decoder.decode(chunk);\n          // FIXME without removing async, Vite will move it\n          // to the proxy cache, which breaks __WAKU_PUSH__.\n          data = data.replace(/<script type=\"module\" async>/, '<script>');\n          return new Promise<void>((resolve) => {\n            options.transformIndexHtml(pathname, data).then((result) => {\n              controller.enqueue(encoder.encode(result));\n              resolve();\n            });\n          });\n        }\n        controller.enqueue(chunk);\n      },\n      flush() {\n        if (!headSent) {\n          throw new Error('head not yet sent');\n        }\n      },\n    });\n  };\n\n  return async (req) => {\n    // const res = new Response();\n    // // const basePrefix = options.config.basePath + options.config.rscPath + '/';\n    // const handleError = (err: unknown) => {\n    //   if (hasStatusCode(err)) {\n    //     res.status\n    //     res.status = err.statusCode;\n    //   } else {\n    //     console.info('Cannot render RSC', err);\n    //     res.setStatus(500);\n    //   }\n    //   endStream(res.stream, String(err));\n    // };\n    let context: Context | undefined;\n    // try {\n    //   //   context = unstable_prehook?.(req, res);\n    // } catch (e) {\n    //   handleError(e);\n    //   return;\n    // }\n    const { config } = options;\n    // if (ssr) {\n    // try {\n    const readable = await renderHtml({\n      config: config!,\n      serverRoot: options.projectRoot,\n      pathname: req.url.pathname,\n      searchParams: req.url.searchParams,\n      htmlHead: `${options.config.htmlHead}\n<script src=\"${options.config.basePath}${options.config.srcDir}/${options.config.mainJs}\" async type=\"module\"></script>`,\n      renderRscForHtml: async (input, searchParams) => {\n        console.log('renderRscForHtml>', input, searchParams);\n        const [readable, nextCtx] = await options.renderRscWithWorker({\n          input,\n          searchParamsString: searchParams?.toString() ?? '',\n          method: 'GET',\n          contentType: undefined,\n          config: options.config,\n          context,\n        });\n        context = nextCtx as Context;\n        return readable;\n      },\n      async getSsrConfigForHtml(pathname, options) {\n        console.log('getSsrConfigForHtml>', pathname, options);\n        return {\n          input: '',\n          body: React.createElement(Slot, { id: 'index' }),\n        };\n      },\n      //getSsrConfigWithWorker(config, pathname, options),\n      // loadClientModule: (key) => CLIENT_MODULE_MAP[key],\n      isDev: true,\n      rootDir: options.projectRoot,\n      loadServerFile,\n    });\n    const res = new Response(readable, {\n      status: 200,\n      headers: {\n        'content-type': 'text/html; charset=utf-8',\n      },\n    });\n    if (readable) {\n      //   unstable_posthook?.(req, res, context as Context);\n      // res.setHeader('content-type', 'text/html; charset=utf-8');\n      readable.pipeThrough(await transformIndexHtml(req.url.pathname)).pipeTo(res.body);\n    }\n    return res;\n    // } catch (e) {\n    //   handleError(e);\n    //   return;\n    // }\n    // }\n    // if (req.url.pathname.startsWith(basePrefix)) {\n    //   const { method, contentType } = req;\n    //   if (method !== 'GET' && method !== 'POST') {\n    //     throw new Error(`Unsupported method '${method}'`);\n    //   }\n    //   try {\n    //     const input = decodeInput(req.url.pathname.slice(basePrefix.length));\n    //     const [readable, nextCtx] = await options.renderRscWithWorker({\n    //       input,\n    //       searchParamsString: req.url.searchParams.toString(),\n    //       method,\n    //       contentType,\n    //       config: options.config,\n    //       context,\n    //       stream: req.stream,\n    //     });\n    //     // unstable_posthook?.(req, res, nextCtx as Context);\n    //     readable.pipeTo(res.stream);\n    //   } catch (e) {\n    //     handleError(e);\n    //   }\n    //   return;\n    // }\n    // throw new Error('Unhandled request: ' + req.url.pathname);\n  };\n}\n"]}