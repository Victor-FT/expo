{"version":3,"file":"stream.js","sourceRoot":"","sources":["../../src/rsc/stream.ts"],"names":[],"mappings":";AAAA,mIAAmI;;;AAE5H,MAAM,SAAS,GAAG,KAAK,EAAE,MAAsB,EAAE,OAAgB,EAAE,EAAE;IAC1E,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;IAClC,MAAM,MAAM,CAAC,KAAK,CAAC;IACnB,IAAI,OAAO,EAAE;QACX,MAAM,MAAM,CAAC,KAAK,CAAC,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;KACvD;IACD,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;AACvB,CAAC,CAAC;AAPW,QAAA,SAAS,aAOpB;AAEK,MAAM,iBAAiB,GAAG,CAAC,IAAkB,EAAc,EAAE;IAClE,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC3D,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;IAClC,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;QACtB,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QACvB,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC;KACtB;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AATW,QAAA,iBAAiB,qBAS5B;AAEK,MAAM,cAAc,GAAG,KAAK,EAAE,MAAsB,EAAmB,EAAE;IAC9E,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;IAClC,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;IAClC,MAAM,IAAI,GAAa,EAAE,CAAC;IAC1B,IAAI,MAAyC,CAAC;IAC9C,GAAG;QACD,MAAM,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QAC7B,IAAI,MAAM,CAAC,KAAK,EAAE;YAChB,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,YAAY,UAAU,CAAC,EAAE;gBACzC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;aAC5C;YACD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;SAC3D;KACF,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE;IACvB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;IAC5B,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACvB,CAAC,CAAC;AAhBW,QAAA,cAAc,kBAgBzB;AAEK,MAAM,cAAc,GAAG,CAAC,GAAW,EAAkB,EAAE;IAC5D,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;IAClC,OAAO,IAAI,cAAc,CAAC;QACxB,KAAK,CAAC,UAAU;YACd,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACxC,UAAU,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AARW,QAAA,cAAc,kBAQzB","sourcesContent":["// From waku https://github.com/dai-shi/waku/blob/32d52242c1450b5f5965860e671ff73c42da8bd0/packages/waku/src/lib/utils/stream.ts#L1\n\nexport const endStream = async (stream: WritableStream, message?: string) => {\n  const writer = stream.getWriter();\n  await writer.ready;\n  if (message) {\n    await writer.write(new TextEncoder().encode(message));\n  }\n  await writer.close();\n};\n\nexport const concatUint8Arrays = (arrs: Uint8Array[]): Uint8Array => {\n  const len = arrs.reduce((acc, arr) => acc + arr.length, 0);\n  const array = new Uint8Array(len);\n  let offset = 0;\n  for (const arr of arrs) {\n    array.set(arr, offset);\n    offset += arr.length;\n  }\n  return array;\n};\n\nexport const streamToString = async (stream: ReadableStream): Promise<string> => {\n  const decoder = new TextDecoder();\n  const reader = stream.getReader();\n  const outs: string[] = [];\n  let result: ReadableStreamReadResult<unknown>;\n  do {\n    result = await reader.read();\n    if (result.value) {\n      if (!(result.value instanceof Uint8Array)) {\n        throw new Error('Unexepected buffer type');\n      }\n      outs.push(decoder.decode(result.value, { stream: true }));\n    }\n  } while (!result.done);\n  outs.push(decoder.decode());\n  return outs.join('');\n};\n\nexport const stringToStream = (str: string): ReadableStream => {\n  const encoder = new TextEncoder();\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(encoder.encode(str));\n      controller.close();\n    },\n  });\n};\n"]}