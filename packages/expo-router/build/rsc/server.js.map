{"version":3,"file":"server.js","sourceRoot":"","sources":["../../src/rsc/server.ts"],"names":[],"mappings":";;;AA4CA,SAAgB,aAAa,CAC3B,aAA4B,EAC5B,cAA+B,EAC/B,YAA2B;IAE3B,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,YAAY,EAAE,CAAC;AACzD,CAAC;AAND,sCAMC;AAYD,SAAgB,MAAM,CAAC,GAAW;IAChC,6DAA6D;IAC7D,OAAQ,UAAkB,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;AACvD,CAAC;AAHD,wBAGC","sourcesContent":["import type { ReactNode } from 'react';\n\nimport type { PathSpec } from './path';\n\ntype Elements = Record<string, ReactNode>;\n\nexport interface RenderContext<T = unknown> {\n  rerender: (input: string, searchParams?: URLSearchParams) => void;\n  context: T;\n}\n\nexport type RenderEntries = (\n  this: RenderContext,\n  input: string,\n  searchParams: URLSearchParams\n) => Promise<Elements | null>;\n\nexport type GetBuildConfig = (\n  unstable_collectClientModules: (input: string) => Promise<string[]>\n) => Promise<\n  Iterable<{\n    pathname: string;\n    entries?: Iterable<{\n      input: string;\n      skipPrefetch?: boolean;\n      isStatic?: boolean;\n    }>;\n    customCode?: string; // optional code to inject TODO hope to remove this\n    context?: unknown;\n  }>\n>;\n\nexport type GetSsrConfig = (\n  pathname: string,\n  options: {\n    searchParams: URLSearchParams;\n    isPrd: boolean;\n  }\n) => Promise<{\n  input: string;\n  searchParams?: URLSearchParams;\n  body: ReactNode;\n} | null>;\n\nexport function defineEntries(\n  renderEntries: RenderEntries,\n  getBuildConfig?: GetBuildConfig,\n  getSsrConfig?: GetSsrConfig\n) {\n  return { renderEntries, getBuildConfig, getSsrConfig };\n}\n\nexport type EntriesDev = {\n  default: ReturnType<typeof defineEntries>;\n};\n\nexport type EntriesPrd = EntriesDev & {\n  loadModule: (id: string) => Promise<unknown>;\n  dynamicHtmlPaths: [pathSpec: PathSpec, htmlHead: string][];\n  publicIndexHtml: string;\n};\n\nexport function getEnv(key: string): string | undefined {\n  // HACK we may want to use a server-side context or something\n  return (globalThis as any).__WAKU_PRIVATE_ENV__[key];\n}\n"]}