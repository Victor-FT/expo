{"version":3,"file":"SkipContext.js","sourceRoot":"","sources":["../../../src/rsc/router/SkipContext.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEb,qFAAqF;AACrF,mCAAmC;AACnC,6CAA+B;AAI/B,MAAM,eAAe,GAAG,KAAK,CAAC,aAAa,CAIjC,IAAI,CAAC,CAAC;AAEhB,SAAgB,gBAAgB,CAAC,EAAE,QAAQ,EAAoC;IAC7E,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAe,EAAE,CAAC,CAAC;IAC/D,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAE5C,OAAO,CACL,CAAC,eAAe,CAAC,QAAQ,CACvB,KAAK,CAAC,CAAC;YACL,OAAO;YACP,IAAI,CAAC,IAAI;gBACP,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;YAClC,CAAC;YACD,GAAG,CAAC,IAAI;gBACN,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjD,CAAC;SACF,CAAC,CACF;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,eAAe,CAAC,QAAQ,CAAC,CAC5B,CAAC;AACJ,CAAC;AAlBD,4CAkBC;AAED,SAAgB,WAAW;IACzB,MAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;IACnD,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;KACpD;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAND,kCAMC","sourcesContent":["'use client';\n\n// Emulates the document window <meta> tag used for adding skip meta to the document.\n// -> meta[name=\"expo-should-skip\"]\nimport * as React from 'react';\n\nimport { ShouldSkip } from './common';\n\nconst SkipMetaContext = React.createContext<{\n  current: ShouldSkip;\n  push: (skip: ShouldSkip) => void;\n  pop: (skip: ShouldSkip) => void;\n} | null>(null);\n\nexport function SkipMetaProvider({ children }: { children: React.ReactElement }) {\n  const [history, setHistory] = React.useState<ShouldSkip[]>([]);\n  const current = history[history.length - 1];\n\n  return (\n    <SkipMetaContext.Provider\n      value={{\n        current,\n        push(skip) {\n          setHistory((h) => [...h, skip]);\n        },\n        pop(skip) {\n          setHistory((h) => h.slice(0, h.indexOf(skip)));\n        },\n      }}>\n      {children}\n    </SkipMetaContext.Provider>\n  );\n}\n\nexport function useSkipMeta() {\n  const skipMeta = React.useContext(SkipMetaContext);\n  if (!skipMeta) {\n    throw new Error('Missing SkipMeta React provider');\n  }\n  return skipMeta;\n}\n"]}