{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../src/rsc/router/common.ts"],"names":[],"mappings":";;;AAKA,SAAgB,eAAe,CAAC,IAAY;IAC1C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAClD,MAAM,KAAK,GAAG,IAAI,GAAG,EAAU,CAAC;IAChC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,IAAI,SAAS,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE;QACtD,MAAM,EAAE,GAAG,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9D,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;KACf;IACD,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5C,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC3B,CAAC;AATD,0CASC;AAED,SAAgB,cAAc,CAAC,IAAY;IACzC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;QACzB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;KAC/C;IACD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC;AALD,wCAKC;AAED,SAAgB,gBAAgB,CAAC,KAAa;IAC5C,OAAO,GAAG,GAAG,KAAK,CAAC;AACrB,CAAC;AAFD,4CAEC;AAEY,QAAA,cAAc,GAAG,kBAAkB,CAAC;AAEjD,oEAAoE;AACvD,QAAA,cAAc,GAAG,cAAc,CAAC;AAWtC,MAAM,WAAW,GAAG,CACzB,UAAsB,EACtB,YAA+B,EAC/B,KAAiB,EACjB,MAAkC,EACxB,EAAE;IACZ,uCAAuC;IACvC,aAAa;IAEb,4EAA4E;IAC5E,cAAc;IACd,eAAe;IACf,IAAI;IACJ,0DAA0D;IAC1D,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE;QAChC,MAAM,SAAS,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;QAC7B,IAAI,CAAC,SAAS,EAAE;YACd,OAAO,KAAK,CAAC;SACd;QACD,MAAM,WAAW,GAAG,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;QACrC,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,KAAK,CAAC;SACd;QACD,IAAI,WAAW,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,EAAE;YACrD,OAAO,KAAK,CAAC;SACd;QACD,IACE,WAAW,CAAC,IAAI,EAAE,IAAI,CACpB,CAAC,GAAG,EAAE,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CACzE,EACD;YACA,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAnCW,QAAA,WAAW,eAmCtB","sourcesContent":["export type RouteProps = {\n  path: string;\n  searchParams: URLSearchParams;\n};\n\nexport function getComponentIds(path: string): readonly string[] {\n  const pathItems = path.split('/').filter(Boolean);\n  const idSet = new Set<string>();\n  for (let index = 0; index <= pathItems.length; ++index) {\n    const id = [...pathItems.slice(0, index), 'layout'].join('/');\n    idSet.add(id);\n  }\n  idSet.add([...pathItems, 'page'].join('/'));\n  return Array.from(idSet);\n}\n\nexport function getInputString(path: string): string {\n  if (!path.startsWith('/')) {\n    throw new Error('Path should start with `/`');\n  }\n  return path.slice(1);\n}\n\nexport function parseInputString(input: string): string {\n  return '/' + input;\n}\n\nexport const PARAM_KEY_SKIP = 'expo_router_skip';\n\n// It starts with \"/\" to avoid conflicing with normal component ids.\nexport const SHOULD_SKIP_ID = '/SHOULD_SKIP';\n\n// The key is componentId\nexport type ShouldSkip = Record<\n  string,\n  {\n    path?: boolean; // if we compare path\n    keys?: string[]; // searchParams keys to compare\n  }\n>;\n\nexport const getSkipList = (\n  shouldSkip: ShouldSkip,\n  componentIds: readonly string[],\n  props: RouteProps,\n  cached: Record<string, RouteProps>\n): string[] => {\n  // // TODO: Implement skip list somehow\n  // return [];\n\n  // const ele: any = document.querySelector('meta[name=\"expo-should-skip\"]');\n  // if (!ele) {\n  //   return [];\n  // }\n  // const shouldSkip: ShouldSkip = JSON.parse(ele.content);\n  return componentIds.filter((id) => {\n    const prevProps = cached[id];\n    if (!prevProps) {\n      return false;\n    }\n    const shouldCheck = shouldSkip?.[id];\n    if (!shouldCheck) {\n      return false;\n    }\n    if (shouldCheck.path && props.path !== prevProps.path) {\n      return false;\n    }\n    if (\n      shouldCheck.keys?.some(\n        (key) => props.searchParams.get(key) !== prevProps.searchParams.get(key)\n      )\n    ) {\n      return false;\n    }\n    return true;\n  });\n};\n"]}