{"version":3,"file":"qualified-entry.js","sourceRoot":"","sources":["../src/qualified-entry.tsx"],"names":[],"mappings":";AAAA,sEAAsE;AACtE,wBAAwB;;;;;;AAExB,kDAA0B;AAE1B,mFAAkE;AAElE,uCAA0C;AAE1C,gDAA6C;AAC7C,qCAAsD;AACtD,8EAAqE;AAErE,2BAA2B;AAC3B,SAAS,iBAAiB,CAAC,KAAyB;IAClD,eAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,SAAS,YAAY;YACnB,IAAI,KAAK,CAAC,KAAK,EAAE;gBACf,KAAK,CAAC,KAAK,EAAE,CAAC;aACf;QACH,CAAC;QAED,UAAU,CAAC,6BAA6B,KAAK,EAAE,CAAC;QAChD,MAAM,KAAK,GAAG,UAAU,CAAC,6BAA6B,CAAC,OAAO,CAC5D,UAAU,CAAC,sBAAsB,CAClC,CAAC;QACF,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;YAChB,UAAU,CAAC,6BAA6B,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;SACzE;aAAM;YACL,UAAU,CAAC,6BAA6B,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;SAChE;QACD,UAAU,CAAC,sBAAsB,GAAG,YAAY,CAAC;IACnD,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IAE/B,OAAO,CAAC,uBAAa,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAG,CAAC;AACnE,CAAC;AAED,4DAA4D;AAC5D,SAAgB,GAAG;IACjB,OAAO,CACL,CAAC,uCAAe,CACd;MAAA,CAAC,iDAAgB,CACf,cAAc,CAAC,CAAC;YACd,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;YAC1C,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;SACjD,CAAC,CACF;QAAA,CAAC,SAAG,CAAC,KAAK,CAAC,CAAC,iBAAiB,CAAC,CAC5B;UAAA,CAAC,eAAM,CAAC,AAAD,EACT;QAAA,EAAE,SAAG,CACP;MAAA,EAAE,iDAAgB,CACpB;IAAA,EAAE,uCAAe,CAAC,CACnB,CAAC;AACJ,CAAC;AAdD,kBAcC","sourcesContent":["// import { enableScreens, NativeScreen } from 'react-native-screens';\n// enableScreens(false);\n\nimport React from 'react';\n\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport { ErrorBoundary } from './exports';\n\nimport { Router } from './rsc/router/client';\nimport { ErrorBoundaryProps, Try } from './views/Try';\nimport { LocationContext } from './rsc/router/WindowLocationContext';\n\n// Add root error recovery.\nfunction RootErrorBoundary(props: ErrorBoundaryProps) {\n  React.useEffect(() => {\n    function refetchRoute() {\n      if (props.error) {\n        props.retry();\n      }\n    }\n\n    globalThis.__WAKU_RSC_RELOAD_LISTENERS__ ||= [];\n    const index = globalThis.__WAKU_RSC_RELOAD_LISTENERS__.indexOf(\n      globalThis.__WAKU_REFETCH_ROUTE__\n    );\n    if (index !== -1) {\n      globalThis.__WAKU_RSC_RELOAD_LISTENERS__.splice(index, 1, refetchRoute);\n    } else {\n      globalThis.__WAKU_RSC_RELOAD_LISTENERS__.unshift(refetchRoute);\n    }\n    globalThis.__WAKU_REFETCH_ROUTE__ = refetchRoute;\n  }, [props.error, props.retry]);\n\n  return <ErrorBoundary error={props.error} retry={props.retry} />;\n}\n\n// Must be exported or Fast Refresh won't update the context\nexport function App() {\n  return (\n    <LocationContext>\n      <SafeAreaProvider\n        initialMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}>\n        <Try catch={RootErrorBoundary}>\n          <Router />\n        </Try>\n      </SafeAreaProvider>\n    </LocationContext>\n  );\n}\n"]}