{"version":3,"file":"HMRClientRSC.js","sourceRoot":"","sources":["../src/HMRClientRSC.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Based on this but with web support:\n * https://github.com/facebook/react-native/blob/086714b02b0fb838dee5a66c5bcefe73b53cf3df/Libraries/Utilities/HMRClient.js\n */\n// import prettyFormat, { plugins } from 'pretty-format';\n\n// import LoadingView from './LoadingView';\n// import LogBox from './error-overlay/LogBox';\n// import getDevServer from './getDevServer';\n\n// const MetroHMRClient = require('metro-runtime/src/modules/HMRClient');\nconst pendingEntryPoints: string[] = [];\n\ntype HMRClientType = {\n  send: (msg: string) => void;\n  isEnabled: () => boolean;\n  disable: () => void;\n  enable: () => void;\n  hasPendingUpdates: () => boolean;\n};\n\nlet hmrClient: HMRClientType | null = null;\nlet hmrUnavailableReason: string | null = null;\nlet currentCompileErrorMessage: string | null = null;\nlet didConnect: boolean = false;\nconst pendingLogs: [LogLevel, any[]][] = [];\n\ntype LogLevel =\n  | 'trace'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'log'\n  | 'group'\n  | 'groupCollapsed'\n  | 'groupEnd'\n  | 'debug';\n\nfunction assert(foo: any, msg: string): asserts foo {\n  if (!foo) throw new Error(msg);\n}\n\n/**\n * HMR Client that receives from the server HMR updates and propagates them\n * runtime to reflects those changes.\n */\nconst HMRClient = {\n  enable() {\n    if (hmrUnavailableReason !== null) {\n      // If HMR became unavailable while you weren't using it,\n      // explain why when you try to turn it on.\n      // This is an error (and not a warning) because it is shown\n      // in response to a direct user action.\n      throw new Error(hmrUnavailableReason);\n    }\n\n    assert(hmrClient, 'Expected HMRClient.setup() call at startup.');\n\n    // We use this for internal logging only.\n    // It doesn't affect the logic.\n    hmrClient.send(JSON.stringify({ type: 'log-opt-in' }));\n\n    // When toggling Fast Refresh on, we might already have some stashed updates.\n    // Since they'll get applied now, we'll show a banner.\n    const hasUpdates = hmrClient!.hasPendingUpdates();\n\n    if (hasUpdates) {\n      //   LoadingView.showMessage('Refreshing...', 'refresh');\n    }\n    try {\n      hmrClient.enable();\n    } finally {\n      if (hasUpdates) {\n        // LoadingView.hide();\n      }\n    }\n\n    // There could be a compile error while Fast Refresh was off,\n    // but we ignored it at the time. Show it now.\n    showCompileError();\n  },\n\n  disable() {\n    assert(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    hmrClient.disable();\n  },\n\n  registerBundle(requestUrl: string) {\n    assert(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    pendingEntryPoints.push(requestUrl);\n    registerBundleEntryPoints(hmrClient);\n  },\n\n  log(level: LogLevel, data: any[]) {\n    // if (!hmrClient) {\n    //   // Catch a reasonable number of early logs\n    //   // in case hmrClient gets initialized later.\n    //   pendingLogs.push([level, data]);\n    //   if (pendingLogs.length > 100) {\n    //     pendingLogs.shift();\n    //   }\n    //   return;\n    // }\n    // try {\n    //   hmrClient.send(\n    //     JSON.stringify({\n    //       type: 'log',\n    //       level,\n    //       mode: 'BRIDGE',\n    //       data: data.map((item) =>\n    //         typeof item === 'string'\n    //           ? item\n    //           : prettyFormat(item, {\n    //               escapeString: true,\n    //               highlight: true,\n    //               maxDepth: 3,\n    //               min: true,\n    //               plugins: [plugins.ReactElement],\n    //             })\n    //       ),\n    //     })\n    //   );\n    // } catch {\n    //   // If sending logs causes any failures we want to silently ignore them\n    //   // to ensure we do not cause infinite-logging loops.\n    // }\n  },\n\n  // Called once by the bridge on startup, even if Fast Refresh is off.\n  // It creates the HMR client but doesn't actually set up the socket yet.\n  setup({\n    isEnabled,\n    url,\n    onError,\n  }: {\n    isEnabled: boolean;\n    url: URL;\n    onError?: (error: Error) => void;\n  }) {\n    assert(!hmrClient, 'Cannot initialize hmrClient twice');\n\n    const serverScheme = url.protocol === 'https:' ? 'wss' : 'ws';\n    const client = new MetroHMRClient(`${serverScheme}://${url.host}/hot`);\n    hmrClient = client;\n    console.log('[HMR] setup:', url);\n    // HMRServer understands regular bundle URLs, so prefer that in case\n    // there are any important URL parameters we can't reconstruct from\n    // `setup()`'s arguments.\n    pendingEntryPoints.push(url.toString());\n\n    client.on('connection-error', (e: Error) => {\n      let error = `Cannot connect to Metro.\n \n Try the following to fix the issue:\n - Ensure the Metro dev server is running and available on the same network as this device`;\n      error += `\n \n URL: ${url.host}\n \n Error: ${e.message}`;\n\n      setHMRUnavailableReason(error);\n    });\n\n    client.on('update-start', ({ isInitialUpdate }: { isInitialUpdate?: boolean }) => {\n      currentCompileErrorMessage = null;\n      didConnect = true;\n\n      // if (client.isEnabled() && !isInitialUpdate) {\n      //   // LoadingView.showMessage('Refreshing...', 'refresh');\n      // }\n    });\n\n    client.on('update', ({ isInitialUpdate }: { isInitialUpdate?: boolean }) => {\n      if (client.isEnabled() && !isInitialUpdate) {\n        if (typeof window !== 'undefined') {\n          //   LogBox.clearAllLogs();\n        }\n      }\n    });\n\n    client.on('error', (data: { type: string; message: string }) => {\n      //   LoadingView.hide();\n\n      if (data.type === 'GraphNotFoundError') {\n        client.close();\n        setHMRUnavailableReason('Metro has restarted since the last edit. Reload to reconnect.');\n      } else if (data.type === 'RevisionNotFoundError') {\n        client.close();\n        setHMRUnavailableReason('Metro and the client are out of sync. Reload to reconnect.');\n      } else {\n        currentCompileErrorMessage = `${data.type} ${data.message}`;\n        if (client.isEnabled()) {\n          showCompileError({ onError });\n        }\n      }\n    });\n\n    client.on('close', (closeEvent: { code: number; reason: string }) => {\n      //   LoadingView.hide();\n\n      // https://www.rfc-editor.org/rfc/rfc6455.html#section-7.4.1\n      // https://www.rfc-editor.org/rfc/rfc6455.html#section-7.1.5\n      const isNormalOrUnsetCloseReason =\n        closeEvent == null ||\n        closeEvent.code === 1000 ||\n        closeEvent.code === 1005 ||\n        closeEvent.code == null;\n\n      setHMRUnavailableReason(\n        `${\n          isNormalOrUnsetCloseReason\n            ? 'Disconnected from Metro.'\n            : `Disconnected from Metro (${closeEvent.code}: \"${closeEvent.reason}\").`\n        }\n\nTo reconnect:\n- Ensure that Metro is running and available on the same network\n- Reload this app (will trigger further help if Metro cannot be connected to)\n      `\n      );\n    });\n\n    if (isEnabled) {\n      HMRClient.enable();\n    } else {\n      HMRClient.disable();\n    }\n\n    registerBundleEntryPoints(hmrClient);\n    flushEarlyLogs();\n  },\n};\n\nfunction setHMRUnavailableReason(reason: string) {\n  assert(hmrClient, 'Expected HMRClient.setup() call at startup.');\n  if (hmrUnavailableReason !== null) {\n    // Don't show more than one warning.\n    return;\n  }\n  hmrUnavailableReason = reason;\n\n  // We only want to show a warning if Fast Refresh is on *and* if we ever\n  // previously managed to connect successfully. We don't want to show\n  // the warning to native engineers who use cached bundles without Metro.\n  if (hmrClient.isEnabled() && didConnect) {\n    console.warn(reason);\n    // (Not using the `warning` module to prevent a Buck cycle.)\n  }\n}\n\nfunction registerBundleEntryPoints(client: HMRClientType | null) {\n  if (hmrUnavailableReason != null) {\n    return;\n  }\n\n  if (pendingEntryPoints.length > 0) {\n    client?.send(\n      JSON.stringify({\n        type: 'register-entrypoints',\n        entryPoints: pendingEntryPoints,\n      })\n    );\n    pendingEntryPoints.length = 0;\n  }\n}\n\nfunction flushEarlyLogs() {\n  try {\n    pendingLogs.forEach(([level, data]) => {\n      HMRClient.log(level, data);\n    });\n  } finally {\n    pendingLogs.length = 0;\n  }\n}\n\nfunction showCompileError({ onError }: { onError?: (error: Error) => void } = {}) {\n  if (currentCompileErrorMessage === null) {\n    return;\n  }\n\n  const message = currentCompileErrorMessage;\n  currentCompileErrorMessage = null;\n\n  const error = new Error(message);\n  // Symbolicating compile errors is wasted effort\n  // because the stack trace is meaningless:\n  // @ts-expect-error\n  error.preventSymbolication = true;\n\n  if (onError) {\n    onError(error);\n  } else {\n    throw error;\n  }\n}\n\nexport default HMRClient;\n\nimport { WebSocket } from 'ws';\n\nconst EventEmitter = require('metro-runtime/src/modules/vendor/eventemitter3');\nconst inject = ({ module: [id, code], sourceURL }) => {\n  // eslint-disable-next-line no-eval\n  eval(code);\n};\nconst injectUpdate = (update) => {\n  update.added.forEach(inject);\n  update.modified.forEach(inject);\n};\nclass MetroHMRClient extends EventEmitter {\n  _isEnabled = false;\n  _pendingUpdate: null | {\n    isInitialUpdate: boolean;\n    revisionId: string;\n    added: unknown[];\n    modified: unknown[];\n    deleted: unknown[];\n  } = null;\n  _queue = [];\n  _state = 'opening';\n  constructor(url) {\n    super();\n\n    // Access the global WebSocket object only after enabling the client,\n    // since some polyfills do the initialization lazily.\n    this._ws = new WebSocket(url);\n    this._ws.onopen = () => {\n      this._state = 'open';\n      this.emit('open');\n      this._flushQueue();\n    };\n    this._ws.onerror = (error) => {\n      this.emit('connection-error', error);\n    };\n    this._ws.onclose = (closeEvent) => {\n      this._state = 'closed';\n      this.emit('close', closeEvent);\n    };\n    this._ws.onmessage = (message) => {\n      const data = JSON.parse(String(message.data));\n      console.log('[server] on message:', data);\n      switch (data.type) {\n        case 'bundle-registered':\n          this.emit('bundle-registered');\n          break;\n        case 'update-start':\n          this.emit('update-start', data.body);\n          break;\n        case 'update':\n          this.emit('update', data.body);\n          break;\n        case 'update-done':\n          this.emit('update-done');\n          break;\n        case 'error':\n          this.emit('error', data.body);\n          break;\n        default:\n          this.emit('error', {\n            type: 'unknown-message',\n            message: data,\n          });\n      }\n    };\n    this.on('update', (update) => {\n      if (this._isEnabled) {\n        // NOTE: Disable injection for now since the requests just trigger a new bundle with a delta index.\n        // injectUpdate(update);\n      } else if (this._pendingUpdate == null) {\n        this._pendingUpdate = update;\n      } else {\n        this._pendingUpdate = mergeUpdates(this._pendingUpdate, update);\n      }\n    });\n  }\n  close() {\n    this._ws.close();\n  }\n  send(message) {\n    switch (this._state) {\n      case 'opening':\n        this._queue.push(message);\n        break;\n      case 'open':\n        this._ws.send(message);\n        break;\n      case 'closed':\n        // Ignore.\n        break;\n      default:\n        throw new Error('[WebSocketHMRClient] Unknown state: ' + this._state);\n    }\n  }\n  _flushQueue() {\n    this._queue.forEach((message) => this.send(message));\n    this._queue.length = 0;\n  }\n  enable() {\n    this._isEnabled = true;\n    const update = this._pendingUpdate;\n    this._pendingUpdate = null;\n    if (update != null) {\n      injectUpdate(update);\n    }\n  }\n  disable() {\n    this._isEnabled = false;\n  }\n  isEnabled() {\n    return this._isEnabled;\n  }\n  hasPendingUpdates() {\n    return this._pendingUpdate != null;\n  }\n}\nfunction mergeUpdates(base, next) {\n  const addedIDs = new Set<string>();\n  const deletedIDs = new Set<string>();\n  const moduleMap = new Map();\n\n  // Fill in the temporary maps and sets from both updates in their order.\n  applyUpdateLocally(base);\n  applyUpdateLocally(next);\n  function applyUpdateLocally(update) {\n    update.deleted.forEach((id) => {\n      if (addedIDs.has(id)) {\n        addedIDs.delete(id);\n      } else {\n        deletedIDs.add(id);\n      }\n      moduleMap.delete(id);\n    });\n    update.added.forEach((item) => {\n      const id = item.module[0];\n      if (deletedIDs.has(id)) {\n        deletedIDs.delete(id);\n      } else {\n        addedIDs.add(id);\n      }\n      moduleMap.set(id, item);\n    });\n    update.modified.forEach((item) => {\n      const id = item.module[0];\n      moduleMap.set(id, item);\n    });\n  }\n\n  // Now reconstruct a unified update from our in-memory maps and sets.\n  // Applying it should be equivalent to applying both of them individually.\n  const result = {\n    isInitialUpdate: next.isInitialUpdate,\n    revisionId: next.revisionId,\n    added: [],\n    modified: [],\n    deleted: [],\n  };\n  deletedIDs.forEach((id) => {\n    result.deleted.push(id);\n  });\n  moduleMap.forEach((item, id) => {\n    if (deletedIDs.has(id)) {\n      return;\n    }\n    if (addedIDs.has(id)) {\n      result.added.push(item);\n    } else {\n      result.modified.push(item);\n    }\n  });\n  return result;\n}\n\nexport function createNodeFastRefresh({ onReload }: { onReload }) {\n  // This needs to run before the renderer initializes.\n\n  const ReactRefreshRuntime = require('react-refresh/runtime');\n  ReactRefreshRuntime.injectIntoGlobalHook(global);\n\n  const Refresh = {\n    performFullRefresh: onReload,\n\n    createSignatureFunctionForTransform: ReactRefreshRuntime.createSignatureFunctionForTransform,\n\n    isLikelyComponentType: ReactRefreshRuntime.isLikelyComponentType,\n\n    getFamilyByType: ReactRefreshRuntime.getFamilyByType,\n\n    register: ReactRefreshRuntime.register,\n\n    performReactRefresh() {\n      //   if (ReactRefreshRuntime.hasUnrecoverableErrors()) {\n      onReload();\n      //     return;\n      //   }\n      //   ReactRefreshRuntime.performReactRefresh();\n    },\n  };\n\n  // The metro require polyfill can not have dependencies (applies for all polyfills).\n  // Expose `Refresh` by assigning it to global to make it available in the polyfill.\n  globalThis[(globalThis.__METRO_GLOBAL_PREFIX__ || '') + '__ReactRefresh'] = Refresh;\n}\n"]}