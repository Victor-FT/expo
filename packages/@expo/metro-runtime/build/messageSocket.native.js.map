{"version":3,"file":"messageSocket.native.js","sourceRoot":"","sources":["../src/messageSocket.native.ts"],"names":[],"mappings":";AAAA,wBAAwB;;AAIxB,SAAS,yBAAyB,CAAC,OAAe,UAAU;IAC1D,MAAM,YAAY,GAAG,OAAO,CAAC,mDAAmD,CAAC,CAAC;IAClF,MAAM,SAAS,GAAG,YAAY,EAAE,CAAC;IACjC,IAAI,CAAC,SAAS,CAAC,sBAAsB,EAAE;QACrC,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;KAC3F;IAED,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IAC5C,MAAM,YAAY,GAAG,YAAY,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IACvE,MAAM,SAAS,GAAG,OAAO,CAAC,4CAA4C,CAAC,CAAC;IACxE,OAAO,IAAI,SAAS,CAAC,GAAG,YAAY,MAAM,YAAY,CAAC,IAAI,GAAG,IAAI,EAAE,CAAC,CAAC;AACxE,CAAC;AAED,yBAAyB,EAAE,CAAC,SAAS,GAAG,CAAC,OAAO,EAAE,EAAE;IAClD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9C,QAAQ,IAAI,CAAC,MAAM,EAAE;QACnB,KAAK,gBAAgB;YACnB,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;gBACxB,KAAK,YAAY;oBACf,uCAAuC;oBACvC,UAAU,CAAC,6BAA6B,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;oBAC9D,aAAa;oBACb,iEAAiE;oBACjE,MAAM;oBACN,MAAM;aACT;YACD,MAAM;QACR,2DAA2D;KAC5D;AACH,CAAC,CAAC","sourcesContent":["/* eslint-env browser */\n\nimport OS from 'expo-router/os';\n\nfunction createWebSocketConnection(path: string = '/message') {\n  const getDevServer = require('react-native/Libraries/Core/Devtools/getDevServer');\n  const devServer = getDevServer();\n  if (!devServer.bundleLoadedFromServer) {\n    throw new Error('Cannot create devtools websocket connections in embedded environments.');\n  }\n\n  const devServerUrl = new URL(devServer.url);\n  const serverScheme = devServerUrl.protocol === 'https:' ? 'wss' : 'ws';\n  const WebSocket = require('react-native/Libraries/WebSocket/WebSocket');\n  return new WebSocket(`${serverScheme}://${devServerUrl.host}${path}`);\n}\n\ncreateWebSocketConnection().onmessage = (message) => {\n  const data = JSON.parse(String(message.data));\n  switch (data.method) {\n    case 'sendDevCommand':\n      switch (data.params.name) {\n        case 'rsc-reload':\n          //   if (data.params.platform === OS) {\n          globalThis.__WAKU_RSC_RELOAD_LISTENERS__?.forEach((l) => l());\n          //   } else {\n          //     console.warn('FAKE: RSC reload is only supported on web');\n          //   }\n          break;\n      }\n      break;\n    // NOTE: All other cases are handled in the native runtime.\n  }\n};\n"]}