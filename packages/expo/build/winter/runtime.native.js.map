{"version":3,"file":"runtime.native.js","sourceRoot":"","sources":["../../src/winter/runtime.native.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,cAAc,IAAI,aAAa,EAAE,MAAM,oDAAoD,CAAC;AAErG,iFAAiF;AACjF,uFAAuF;AACvF,yBAAyB;AACzB,MAAM,cAAc,GAAG,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AAElD,SAAS,gBAAgB,CAAC,GAAW;IACnC,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,cAAc,EAAE;QACzC,KAAK,EAAE,IAAI;QACX,UAAU,EAAE,KAAK;QACjB,YAAY,EAAE,KAAK;KACpB,CAAC,CAAC;IACH,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAS,OAAO,CAAC,IAAY,EAAE,QAAmB;IAChD,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;AAC1D,CAAC;AACD,sGAAsG;AAEtG,sFAAsF;AAEtF,mCAAmC;AACnC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;AAC3C,+CAA+C;AAC/C,OAAO,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC;AAEnE,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC;AACvD,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC;AACvD,aAAa,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,WAAW,CAAC,CAAC;AACzE,aAAa,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,WAAW,CAAC,CAAC;AACzE,aAAa,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,mCAAmC,CAAC,CAAC,cAAc,CAAC,CAAC;AACnG,aAAa,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC,OAAO,CAAC,CAAC;AAC1E,aAAa,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC,OAAO,CAAC,CAAC;AAC1E,aAAa,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC,QAAQ,CAAC,CAAC;AAE5E,+CAA+C;AAC/C,qDAAqD;AACrD,uDAAuD;AACvD,8DAA8D;AAC9D,oDAAoD;AACpD,uFAAuF;AACvF,mGAAmG;AAEnG,4BAA4B;AAC5B,IAAI;AACJ,yDAAyD;AACzD,2DAA2D;AAC3D,kEAAkE;AAClE,MAAM;AACN,mBAAmB;AACnB,yFAAyF;AAEzF,8CAA8C;AAC9C,iDAAiD;AACjD,qDAAqD;AACrD,YAAY;AACZ,4CAA4C;AAC5C,kDAAkD;AAClD,kDAAkD;AAClD,oDAAoD;AACpD,SAAS;AACT,OAAO;AACP,2DAA2D;AAC3D,yDAAyD;AACzD,4DAA4D;AAC5D,2CAA2C;AAC3C,QAAQ","sourcesContent":["// This file configures the runtime environment to increase compatibility with WinterCG.\n// https://wintercg.org/\nimport { wrapFetchWithWindowLocation } from '@expo/metro-runtime/build/location/install.native';\nimport { polyfillGlobal as installGlobal } from 'react-native/Libraries/Utilities/PolyfillFunctions';\n\n// Add a well-known shared symbol that doesn't show up in iteration or inspection\n// this can be used to detect if the global object abides by the Expo team's documented\n// built-in requirements.\nconst BUILTIN_SYMBOL = Symbol.for('expo.builtin');\n\nfunction addBuiltinSymbol(obj: object) {\n  Object.defineProperty(obj, BUILTIN_SYMBOL, {\n    value: true,\n    enumerable: false,\n    configurable: false,\n  });\n  return obj;\n}\n\nfunction install(name: string, getValue: () => any) {\n  installGlobal(name, () => addBuiltinSymbol(getValue()));\n}\n// installGlobal('fetch', () => wrapFetchWithWindowLocation(require('react-native-fetch-api').fetch));\n\n// const fetch = wrapFetchWithWindowLocation(require('react-native-fetch-api').fetch);\n\n// https://url.spec.whatwg.org/#url\ninstall('URL', () => require('./url').URL);\n// https://url.spec.whatwg.org/#urlsearchparams\ninstall('URLSearchParams', () => require('./url').URLSearchParams);\n\ninstallGlobal('atob', () => require('base-64').decode);\ninstallGlobal('btoa', () => require('base-64').encode);\ninstallGlobal('TextEncoder', () => require('text-encoding').TextEncoder);\ninstallGlobal('TextDecoder', () => require('text-encoding').TextDecoder);\ninstallGlobal('ReadableStream', () => require('web-streams-polyfill/ponyfill/es6').ReadableStream);\ninstallGlobal('Headers', () => require('react-native-fetch-api').Headers);\ninstallGlobal('Request', () => require('react-native-fetch-api').Request);\ninstallGlobal('Response', () => require('react-native-fetch-api').Response);\n\n// import 'react-native-polyfill-globals/auto';\n// import 'react-native-polyfill-globals/src/base64';\n// import 'react-native-polyfill-globals/src/encoding';\n// import 'react-native-polyfill-globals/src/readable-stream';\n// import 'react-native-polyfill-globals/src/fetch';\n// import { polyfillGlobal } from 'react-native/Libraries/Utilities/PolyfillFunctions';\n// import { wrapFetchWithWindowLocation } from '@expo/metro-runtime/build/location/install.native';\n\n// // export default () => {\n// [\n//   require('react-native-polyfill-globals/src/base64'),\n//   require('react-native-polyfill-globals/src/encoding'),\n//   require('react-native-polyfill-globals/src/readable-stream'),\n//   {\n//     polyfill() {\n//       const { fetch, Headers, Request, Response } = require('react-native-fetch-api');\n\n//       // wrapFetchWithWindowLocation(fetch)\n//       Object.defineProperty(global, 'fetch', {\n//         value: wrapFetchWithWindowLocation(fetch),\n//       });\n//       // polyfillGlobal('fetch', () => );\n//       polyfillGlobal('Headers', () => Headers);\n//       polyfillGlobal('Request', () => Request);\n//       polyfillGlobal('Response', () => Response);\n//     },\n//   },\n//   // require('react-native-polyfill-globals/src/fetch'),\n//   // require('react-native-polyfill-globals/src/url'),\n//   // require('react-native-polyfill-globals/src/crypto'),\n// ].forEach(({ polyfill }) => polyfill());\n// // };\n"]}